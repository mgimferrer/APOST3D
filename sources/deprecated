      function www2dif(nat0,nocc0,ii,jj,jcenter1,jcenter2,sab,i,k,ixyz)
      IMPLICIT REAL*8(A-H,O-Z)
      include 'parameter.h'
      common /nat/ nat,igr,ifg,nocc,nalf,nb,kop
      common /coord/ coord(3,maxat),zn(maxat),iznuc(maxat)
      common /quadrat/th(1000),ph(1000),w(1000),wr(500),Xr(500)
      common/actual/iact,jact,icenter
      common/pha2/pha,phb,rr00
      dimension delta(3),xab(3),xab2(3)
      dimension sab(nocc0,nocc0,nat0)
 
      iactat=ihold(iact)
      f=0.d0
      thx=th(i)
      fix=ph(i)
      rr=xr(k)
      xabs0=rr*dsin(thx)*dcos(fix)
      yabs0=rr*dsin(thx)*dsin(fix)
      zabs0=rr*dcos(thx)
      xabs=dcos(phb)*xabs0+dsin(phb)*yabs0
      yabs=-dcos(pha)*dsin(phb)*xabs0+dcos(pha)*dcos(phb)*yabs0+dsin(pha)*zabs0
      zabs=dsin(pha)*dsin(phb)*xabs0-dsin(pha)*dcos(phb)*yabs0+dcos(pha)*zabs0
      xab(1)=xabs+coord(1,icenter)
      xab(2)=yabs+coord(2,icenter)
      xab(3)=zabs+coord(3,icenter)
 
      wa=wat(jcenter1,xab(1),xab(2),xab(3))
      wb=wat(jcenter2,xab(1),xab(2),xab(3))
      gab=sab(ii,jj,jcenter1)*wb+sab(ii,jj,jcenter2)*wa

      if(abs(gab).gt.1.0d-5) then
      step=1.0d-4
c 2 point numerical differntiation
      do kk=0,1    
       do iii=1,3
        xab2(iii)=xab(iii)
       end do
       xab2(ixyz)=xab2(ixyz)+(2.0*kk-1.0)*step
       wa0=wat(jcenter1,xab2(1),xab2(2),xab2(3))
       wb0=wat(jcenter2,xab2(1),xab2(2),xab2(3))
       delta(kk+1)=sab(ii,jj,jcenter1)*wb0+sab(ii,jj,jcenter2)*wa0
      end do
      www2dif=(delta(2)-delta(1))/(2.0d0*step)

      else
       www2dif=0.0d0                               
      end if
      
 
      return
      end

      subroutine numint_sha(ndim,itotps,nat0,wp,chp,omp,omp2,ibaspoint)
      use ao_matrices
      use integration_grid
      IMPLICIT REAL*8(A-H,O-Z)
      include 'parameter.h'
      common /nat/ nat,igr,ifg,nocc,nalf,nb,kop
      common /coord/ coord(3,maxat),zn(maxat),iznuc(maxat)
      common /iops/iopt(100)
      common/actual/iact,jat,icenter
      dimension wp(itotps),chp(itotps,ndim)
      dimension omp2(itotps,nat0),ibaspoint(itotps)
      dimension omp(itotps)
      allocatable :: rho(:) ,scr(:), chp2(:,:)
c
      dimension eto(maxat,2)

      iallpo = Iopt(7) 
      iqtaim=Iopt(16)

      ipoints=itotps
      iatps=nang*nrad

c igr= number of basis functions

      allocate (rho(itotps),scr(itotps),chp2(itotps,nocc))

c Calculate density
       do k=1,ipoints
        xx=0.0d0
        do j=1,igr
         do i=1,igr 
          xx=xx+p(i,j)*chp(k,i)*chp(k,j)
         end do
        end do
        rho(k)=xx
       end do
c now to MO 
      do k=1,ipoints
       do j=1,nocc
        xx=0.0d0
        do i=1,igr
          xx=xx+c(i,j)*chp(k,i)
        end do
        chp2(k,j)=xx
       end do
      end do
c calculate sigma

      call sigma(itotps,ndim,chp2,scr)
c       do i=1,itotps
c       write(*,*) i,scr(i)
c       end do

C   DOING SHANNON ENTROPY 
C

      do i=1,nat
        eto(i,1)=0.0d0
        eto(i,2)=0.0d0
      end do

       x0=0.0d0 
       if(iallpo.eq.1.and.iqtaim.eq.0) then
        do icenter=1,nat
         x=0.d0
         x1=0.d0
         do jcenter=1,nat
          do jfut=iatps*(jcenter-1)+1,iatps*jcenter
           if(abs(rho(jfut)).gt.1.0d-8) then
            x=x+wp(jfut)*rho(jfut)*log(rho(jfut))*omp2(jfut,icenter)*
     +      omp(jfut)
            x1=x1+wp(jfut)*scr(jfut)/rho(jfut)*omp2(jfut,icenter)*
     +      omp(jfut)
           end if
           x0=x0+wp(jfut)*rho(jfut)*omp2(jfut,icenter)*omp(jfut)
          end do
         end do
         eto(icenter,1)=-x
         eto(icenter,2)=x1
        end do

       else if (iqtaim.eq.1) then

        do jcenter=1,nat
         do jfut=iatps*(jcenter-1)+1,iatps*jcenter
          if(abs(rho(jfut)).gt.1.0d-8) then 
           icenter=ibaspoint(jfut)
           if(icenter.ne.0)then
            eto(icenter,1)=eto(icenter,1)-wp(jfut)*rho(jfut)*
     +      log(rho(jfut))*omp(jfut)
            eto(icenter,2)=eto(icenter,2)-wp(jfut)*scr(jfut)/rho(jfut)
     +      *omp(jfut)
            x0=x0+wp(jfut)*rho(jfut)*omp(jfut)
           end if
          end if
         end do
        end do

       else

       do icenter=1,nat
        x=0.0d0
        x1=0.0d0
         do ifut=iatps*(icenter-1)+1,iatps*icenter
          if(abs(rho(ifut)).gt.1.0d-8) then
          x=x+wp(ifut)*rho(ifut)*log(rho(ifut))*omp2(ifut,icenter)
          x1=x1+wp(ifut)*scr(ifut)/rho(ifut)*omp2(ifut,icenter)
          x0=x0+wp(ifut)*rho(ifut)*omp2(ifut,icenter)
           end if
        enddo
        eto(icenter,1)=-x
        eto(icenter,2)=x1
       enddo

       end if

       xtot=0.0d0
       xtot1=0.0d0
       do icenter=1,nat
        xtot=xtot+eto(icenter,1)
        xtot1=xtot1+eto(icenter,2)
       end do


      print *,'  '
      print *,'  '
      print *,'      INFORMATION POPULATIONS'
      print *,'  '
      print *,'  Atom     Shannon      Fischer  '
      print *,' --------------------------------'
      call vprint(eto,nat,maxat)
      print *,' --------------------------------'
      print 162, xtot,xtot1
 162  format(1x,'  Sum    ',2(f10.6,2x))
      write(*,*) '         '                       

      deallocate (rho)
      
      return
      end
